library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity FreeRun is
	port(clk   : in std_logic;
		  reset : in std_logic;
		  start : in std_logic;
		  don   : out std_logic_vector(31 downto 0));
end FreeRun;

architecture Behavioral of FreeRun is
	signal free_run_counter : std_logic_vector(31 downto 0) := (others => '0');
begin
	 process(clk, reset)
    begin
        if reset = '1' then
            free_run_counter <= (others => '0');
        elsif rising_edge(clk) then
            free_run_counter <= std_logic_vector(unsigned(free_run_counter) + 1);
				--if start = '1' then
					--random_value <= free_run_counter;
				--end if;
        end if;
    end process;

	 process(start, reset)
    begin
        if reset = '1' then
            random_value <= (others => '0');
        elsif rising_edge(start) then
            random_value <= free_run_counter;
        end if;
    end process;

end Behavioral;